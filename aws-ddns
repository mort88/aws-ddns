#!/usr/bin/env python3
# prereqs: apt -y install python3-boto3 python3-click python3-requests

import os
import sys
import socket
import requests

# import requests.packages.urllib3.util.connection
import click
import boto3
import botocore.exceptions

DDNS_DEFAULT_PROFILE = "aws_ddns"
DEFAULT_LOOKUP_URL = "http://ip.m13n.net/ip"
DEFAULT_TYPE = "A"
DEFAULT_TTL = 60
CTX_SETTINGS = dict(max_content_width=180)
IAM_POLICY = """
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "R53ddnsRWpermissions",
            "Effect": "Allow",
            "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets",
                "route53:GetHostedZone"
            ],
            "Resource": "arn:aws:route53:::hostedzone/<R53 zone Id>"
        }
    ]
}
"""


def get_ip_address(hostname, family=socket.AF_INET):
    try:
        # Perform a DNS lookup for the given hostname with AF_INET (IPv4) as default
        addr_info = socket.getaddrinfo(hostname, None, family)
        # Extract the IP address from the address info
        ip_address = addr_info[0][4][0]
        return ip_address
    except socket.gaierror as ex:
        raise


def get_ip_version():
    # type: () -> Optional[int]
    ip_version = requests.packages.urllib3.util.connection.allowed_gai_family()
    if ip_version == socket.AF_INET6:
        return 6
    elif ip_version == socket.AF_INET:
        return 4
    return None


def set_ip_version(ip_version: object = socket.AF_INET6):
    # type: (str) -> bool
    """
    Sets preferred IP protocol version to use in requests / functions
    Attention: this propagates
    By default, AF_INET6 is used which preferes IPv6 but fallbacks to IPv4
    """
    if ip_version == socket.AF_INET:

        def allowed_gai_family():
            return socket.AF_INET

    elif ip_version == socket.AF_INET6:

        def allowed_gai_family():
            if requests.packages.urllib3.util.connection.HAS_IPV6:
                return socket.AF_INET6
            # return socket.AF_INET
            return None

    else:
        return False

    requests.packages.urllib3.util.connection.allowed_gai_family = allowed_gai_family
    return True


def run_check(profile, lookup_url, host, zone_id, domain, ttl):
    for family in (socket.AF_INET, socket.AF_INET6):
        if family == socket.AF_INET:
            record_type = "A"
        else:
            record_type = "AAAA"

        # get current IP
        ddns_host = f"{host}.{domain}"
        try:
            ddns_ip = get_ip_address(ddns_host, family)
        except socket.gaierror as ex:
            click.echo(f"{family.name}: Error resolving {ddns_host}: {ex}")
            ddns_ip = None

        # lookup my IP
        try:
            set_ip_version(family)
            my_ip = requests.get(f"{lookup_url}?host={host}").text.strip()
        except Exception as ex:
            click.echo(f"{family.name}: could not look up IP: {ex}")
            click.echo(f"Skipping {family.name}")
            continue

        # check if an update is needed
        if my_ip == ddns_ip:
            click.echo(
                f"{family.name}: Local IP ({my_ip}) matches currently registered IP for {host} - no change"
            )
        else:
            click.echo(
                f"{family.name}: Local IP ({my_ip}) doesn't match currently registered IP for {host} ({ddns_ip}) - update required"
            )

            # update R53
            click.echo(
                f"{family.name}: Updating {ddns_host} to {my_ip} ({record_type}, {ttl=})"
            )
            try:
                response = r53.change_resource_record_sets(
                    HostedZoneId=zone_id,
                    ChangeBatch={
                        "Comment": f"DDNS update for {ddns_host}",
                        "Changes": [
                            {
                                "Action": "UPSERT",
                                "ResourceRecordSet": {
                                    "Name": f"{ddns_host}",
                                    "Type": f"{record_type}",
                                    "TTL": ttl,
                                    "ResourceRecords": [{"Value": f"{my_ip}"}],
                                },
                            }
                        ],
                    },
                )
            except Exception as ex:
                click.echo(f"ERROR: {ex}")
                sys.exit(1)
            click.echo(
                f"{family.name}: Update complete - {ddns_host} = {my_ip} ({record_type}) (TTL {ttl})"
            )


@click.command(context_settings=CTX_SETTINGS)
@click.option(
    "--profile",
    "-p",
    default=os.environ.get("DDNS_AWS_PROFILE", DDNS_DEFAULT_PROFILE),
    show_default=True,
    help="boto3 profile to use",
)
@click.option(
    "--lookup-url",
    "-l",
    default=os.environ.get("DDNS_LOOKUP_URL", DEFAULT_LOOKUP_URL),
    show_default=True,
    help="URL that returns the client IP (and nothing more)",
)
@click.option(
    "--host",
    "-h",
    default=os.environ.get("DDNS_HOSTNAME", ""),
    show_default=True,
    help="DDNS host name to use",
)
@click.option(
    "--zone-id",
    "-z",
    default=os.environ.get("DDNS_R53_ZONE_ID"),
    show_default=True,
    help="R53 zone ID for DDNS records",
)
@click.option(
    "--domain",
    "-D",
    default=os.environ.get("DDNS_DOMAIN"),
    show_default=True,
    help="Manually set the DDNS domain (defaults to lookup from R53 zone ID)",
)
@click.option(
    "--record-type",
    "-r",
    default=os.environ.get("DDNS_TYPE", DEFAULT_TYPE),
    show_default=True,
    help="DNS record type",
)
@click.option(
    "--ttl",
    "-t",
    default=os.environ.get("DDNS_TTL", DEFAULT_TTL),
    show_default=True,
    help="DNS record TTL",
)
@click.pass_context
def cli(ctx, profile, lookup_url, host, zone_id, domain, record_type, ttl):
    """
    \b
    Perform a DDNS update if local IP doesn't match currently registered one.
    - Fetch currently active IP
    - Fetch local IP
    - Conditionally update if IPs do not match
    """

    def print_help():
        """Print help message and exit"""
        click.echo(ctx.get_help())
        ctx.exit()

    # set up the prereqs
    if not host:
        click.echo(f"ERROR: No host argument given")
        print_help()
    if not zone_id:
        click.echo(f"ERROR: No route53 zone ID given")
        print_help()
    if profile in ["", "None"]:
        profile = None
    try:
        b3s = boto3.session.Session(profile_name=profile)
    except botocore.exceptions.ProfileNotFound as ex:
        click.echo(f"ERROR: {ex}")
        print_help()

    # if domain is not specified manually we fetch it from the R53 zone ID
    if not domain:
        try:
            r53 = b3s.client("route53")
            zone_info = r53.get_hosted_zone(Id=zone_id)
            domain = zone_info["HostedZone"]["Name"]
        except Exception as ex:
            click.echo(f"ERROR: {ex}")
            sys.exit(1)

    run_check(profile, lookup_url, host, zone_id, domain, ttl)


if __name__ == "__main__":
    cli()

# vim: set ts=4 sw=4 tw=0 et syntax=python
