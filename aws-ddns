#!/usr/bin/env python3
# prereqs: apt -y install python3-boto3 python3-click python3-requests

import os
import sys
import socket
import requests
import click
import boto3
import botocore.exceptions

DDNS_DEFAULT_PROFILE = 'aws_ddns'
DEFAULT_LOOKUP_URL = 'http://ip.m13n.net/ip'
DEFAULT_TYPE = 'A'
DEFAULT_TTL = 60
CTX_SETTINGS = dict(max_content_width=180)
IAM_POLICY = """
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "R53ddnsRWpermissions",
            "Effect": "Allow",
            "Action": [
                "route53:ChangeResourceRecordSets",
                "route53:ListResourceRecordSets",
                "route53:GetHostedZone"
            ],
            "Resource": "arn:aws:route53:::hostedzone/<R53 zone Id>"
        }
    ]
}
"""


@click.command(context_settings=CTX_SETTINGS)
@click.option('--profile', '-p', default=os.environ.get('DDNS_AWS_PROFILE', DDNS_DEFAULT_PROFILE), show_default=True, help='boto3 profile to use')
@click.option('--lookup-url', '-l', default=os.environ.get('DDNS_LOOKUP_URL', DEFAULT_LOOKUP_URL), show_default=True, help='URL that returns the client IP (and nothing more)')
@click.option('--host', '-h', default=os.environ.get('DDNS_HOSTNAME', ''), show_default=True, help='DDNS host name to use')
@click.option('--zone-id', '-z', default=os.environ.get('DDNS_R53_ZONE_ID'), show_default=True, help='R53 zone ID for DDNS records')
@click.option('--domain', '-D', default=os.environ.get('DDNS_DOMAIN'), show_default=True, help='Manually set the DDNS domain (defaults to lookup from R53 zone ID)')
@click.option('--record-type', '-r', default=os.environ.get('DDNS_TYPE', DEFAULT_TYPE), show_default=True, help='DNS record type')
@click.option('--ttl', '-t', default=os.environ.get('DDNS_TTL', DEFAULT_TTL), show_default=True, help='DNS record TTL')
@click.pass_context
def cli(ctx, profile, lookup_url, host, zone_id, domain, record_type, ttl):
    """
    \b
    Perform a DDNS update if local IP doesn't match currently registered one.
    - Fetch currently active IP
    - Fetch local IP
    - Conditionally update if IPs do not match
    """

    def print_help():
        """ Print help message and exit """
        click.echo(ctx.get_help())
        ctx.exit()

    # set up the prereqs
    if not host:
        click.echo(f"ERROR: No host argument given")
        print_help()
    if not zone_id:
        click.echo(f"ERROR: No route53 zone ID given")
        print_help()
    if profile in ['', 'None']:
        profile = None
    try:
        b3s = boto3.session.Session(profile_name=profile)
    except botocore.exceptions.ProfileNotFound as e:
        click.echo(f"ERROR: {e}")
        print_help()

    # if domain is not specified manually we fetch it from the R53 zone ID
    if not domain:
        try:
            r53 = b3s.client('route53')
            zone_info = r53.get_hosted_zone(Id=zone_id)
            domain = zone_info['HostedZone']['Name']
        except Exception as e:
            click.echo(f"ERROR: {e}")
            sys.exit(1)

    # get current IP
    ddns_host = f"{host}.{domain}"
    try:
        ddns_ip = socket.gethostbyname(ddns_host)
    except socket.gaierror as e:
        click.echo(f"{ddns_host}: {e}")
        print_help()

    # get local IP
    try:
        my_ip = requests.get(f"{lookup_url}?host={host}").text.strip()
    except Exception as e:
        click.echo(f"ERROR: could not look up IP: {e}")
        sys.exit(1)

    # check if an update is needed
    if my_ip == ddns_ip:
        click.echo(f"Local IP ({my_ip}) matches currently registered IP for {host} - no change")
        sys.exit(0)
    click.echo(f"Local IP ({my_ip}) doesn't match currently registered IP for {host} ({ddns_ip}) - update required")

    # update R53
    try:
        response = r53.change_resource_record_sets(
            HostedZoneId=zone_id,
            ChangeBatch={
                "Comment": f"DDNS update for {ddns_host}",
                "Changes": [
                    {
                        "Action": "UPSERT",
                        "ResourceRecordSet": {
                            "Name": f"{ddns_host}",
                            "Type": f"{record_type}",
                            "TTL": ttl,
                            "ResourceRecords": [
                                {
                                  "Value": f"{my_ip}"
                                }
                            ]
                        }
                    }
                ]
            }
        )
    except Exception as e:
        click.echo(f"ERROR: {e}")
        sys.exit(1)
    click.echo(f"Update complete - {ddns_host} = {my_ip} ({record_type}) (TTL {ttl})")


if __name__ == "__main__":
    cli()

# vim: set ts=4 sw=4 tw=0 et syntax=python
